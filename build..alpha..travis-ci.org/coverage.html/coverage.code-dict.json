{"/home/travis/build/npmtest/node-npmtest-auto-install/test.js":"/* istanbul instrument in package npmtest_auto_install */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-auto-install/lib.npmtest_auto_install.js":"/* istanbul instrument in package npmtest_auto_install */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_auto_install = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_auto_install = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-auto-install/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-auto-install && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_auto_install */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_auto_install\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_auto_install.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_auto_install.rollup.js'] =\n            local.assetsDict['/assets.npmtest_auto_install.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_auto_install.__dirname +\n                    '/lib.npmtest_auto_install.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-auto-install/auto-install/src/index.js":"#!/usr/bin/env node\n\nconst helpers = require('./helpers');\nconst chokidar = require('chokidar');\nconst colors = require('colors');\nconst argv = require('yargs').argv;\n\nlet watchersInitialized = false;\nlet main;\n\n/* Secure mode */\n\nlet secureMode = false;\nif (argv.secure) secureMode = true;\n\nlet uninstallMode = true;\nif (argv['dont-uninstall']) uninstallMode = false;\n\n/* Watch files and repeat drill\n * Add a watcher, call main wrapper to repeat cycle\n */\n\nlet initializeWatchers = () => {\n    let watcher = chokidar.watch('**/*.js', {\n        ignored: 'node_modules'\n    });\n    watcher.on('change', main)\n    .on('unlink', main);\n\n    watchersInitialized = true;\n    console.log('Watchers initialized');\n};\n\n/* Main wrapper\n * Get installed modules from package.json\n * Get used modules from all files\n * Install used modules that are not installed\n * Remove installed modules that are not used\n * After setup, initialize watchers\n */\n\nmain = () => {\n    if (!helpers.packageJSONExists()) {\n        console.log(colors.red('package.json does not exist'));\n        console.log(colors.red('You can create one by using `npm init`'));\n        return;\n    }\n\n    let installedModules = [];\n    installedModules = helpers.getInstalledModules();\n\n    let usedModules = helpers.getUsedModules();\n    usedModules = helpers.filterRegistryModules(usedModules);\n\n    // removeUnusedModules\n\n    if (uninstallMode) {\n        let unusedModules = helpers.diff(installedModules, usedModules);\n        for (let module of unusedModules) helpers.uninstallModule(module);\n    }\n\n    // installModules\n\n    let modulesNotInstalled = helpers.diff(usedModules, installedModules);\n    for (let module of modulesNotInstalled) {\n        if (secureMode) helpers.installModuleIfTrusted(module);\n        else helpers.installModule(module);\n    }\n\n    helpers.cleanup();\n    if (!watchersInitialized) initializeWatchers();\n};\n\n/* Turn the key */\nmain();\n\n","/home/travis/build/npmtest/node-npmtest-auto-install/auto-install/src/helpers.js":"const fs = require('fs');\nconst glob = require('glob');\nconst isBuiltInModule = require('is-builtin-module');\nconst syncExec = require('sync-exec');\nconst ora = require('ora');\nconst logSymbols = require('log-symbols');\nconst request = require('request');\nconst detective = require('detective');\nconst es6detective = require('detective-es6');\nconst colors = require('colors');\nconst argv = require('yargs').argv;\nconst packageJson = require('package-json');\nrequire('./includes-polyfill');\n\n/* File reader\n * Return contents of given file\n */\nlet readFile = (path) => {\n    let content = fs.readFileSync(path, 'utf8');\n    return content;\n};\n\n/* Get installed modules\n * Read dependencies array from package.json\n */\n\nlet getInstalledModules = () => {\n    let content = JSON.parse(readFile('package.json'));\n    let installedModules = [];\n\n    let dependencies = content.dependencies || {};\n    let devDependencies = content.devDependencies || {};\n\n    for (let key of Object.keys(dependencies)) {\n        installedModules.push({\n            name: key,\n            dev: false\n        });\n    }\n    for (let key of Object.keys(devDependencies)) {\n        installedModules.push({\n            name: key,\n            dev: true\n        });\n    }\n\n    return installedModules;\n};\n\n/* Get all js files\n * Return path of all js files\n */\nlet getFiles = () => glob.sync('**/*.js', {ignore: ['node_modules/**/*']});\n\n/* Check for valid string - to stop malicious intentions */\n\nlet isValidModule = ({name}) => {\n    let regex = new RegExp('^([a-z0-9-_]{1,})$');\n    return regex.test(name);\n};\n\n/* Find modules from file\n * Returns array of modules from a file\n */\n\nlet getModulesFromFile = (path) => {\n    let content = fs.readFileSync(path, 'utf8');\n    let modules = [];\n    try {\n        modules = detective(content, {parse: {sourceType: 'module'}});\n\n        let es6modules = es6detective(content, {parse: {sourceType: 'module'}});\n        modules = modules.concat(es6modules);\n\n        modules = modules.filter((module) => isValidModule(module));\n    } catch (err) {\n        console.log(colors.red(`Could not parse ${path}. There is a syntax error in file`));\n    }\n    return modules;\n};\n\n/* Is test file?\n * [.spec.js, .test.js] are supported test file formats\n */\n\nlet isTestFile = (name) => (name.endsWith('.spec.js') || name.endsWith('.test.js'));\n\n/* Dedup similar modules\n * Deduplicates list\n * Ignores/assumes type of the modules in list\n*/\n\nlet deduplicateSimilarModules = (modules) => {\n    let dedupedModules = [];\n    let dedupedModuleNames = [];\n\n    for (let module of modules) {\n        if (!dedupedModuleNames.includes(module.name)) {\n            dedupedModules.push(module);\n            dedupedModuleNames.push(module.name);\n        }\n    }\n\n    return dedupedModules;\n};\n\n/* Dedup modules\n * Divide modules into prod and dev\n * Deduplicates each list\n */\n\nlet deduplicate = (modules) => {\n    let dedupedModules = [];\n\n    let testModules = modules.filter(module => module.dev);\n    dedupedModules = dedupedModules.concat(deduplicateSimilarModules(testModules));\n\n    let prodModules = modules.filter(module => !module.dev);\n    dedupedModules = dedupedModules.concat(deduplicateSimilarModules(prodModules));\n\n    return dedupedModules;\n};\n\n/* Get used modules\n * Read all .js files and grep for modules\n */\n\nlet getUsedModules = () => {\n    let files = getFiles();\n    let usedModules = [];\n    for (let fileName of files) {\n        let modulesFromFile = getModulesFromFile(fileName);\n        let dev = isTestFile(fileName);\n        for (let name of modulesFromFile) usedModules.push({name, dev});\n    }\n    usedModules = deduplicate(usedModules);\n    return usedModules;\n};\n\n/* Handle error\n * Pretty error message for common errors\n */\n\nlet handleError = (err) => {\n    if (err.includes('E404')) {\n        console.log(colors.red('Module is not in the npm registry.'));\n    } else if (err.includes('ENOTFOUND')) {\n        console.log(colors.red('Could not connect to npm, check your internet connection!'));\n    } else console.log(colors.red(err));\n};\n\n/* Command runner\n * Run a given command\n */\n\nlet runCommand = (command) => {\n    let response = syncExec(command);\n    if (response.stderr) {\n        console.log();\n        handleError(response.stderr);\n    }\n    return !response.status; // status = 0 for success\n};\n\n/* Show pretty outputs\n * Use ora spinners to show what's going on\n */\n\nlet startSpinner = (message, type) => {\n    let spinner = ora();\n    spinner.text = message;\n    spinner.color = type;\n    spinner.start();\n    return spinner;\n};\n\nlet stopSpinner = (spinner, message, type) => {\n    spinner.stop();\n    if (!message) return;\n    let symbol;\n    if (type === 'red') symbol = logSymbols.error;\n    else if (type === 'yellow') symbol = logSymbols.warning;\n    else symbol = logSymbols.success;\n    console.log(symbol, message);\n};\n\n/* Is module popular? - for secure mode */\n\nconst POPULARITY_THRESHOLD = 10000;\nlet isModulePopular = (name, callback) => {\n    let spinner = startSpinner(`Checking ${name}`, 'yellow');\n    let url = `https://api.npmjs.org/downloads/point/last-month/${name}`;\n    request(url, (error, response, body) => {\n        stopSpinner(spinner);\n        if (error && error.code === 'ENOTFOUND') {\n            console.log(colors.red('Could not connect to npm, check your internet connection!'));\n        } else {\n            let downloads = JSON.parse(body).downloads;\n            callback(downloads > POPULARITY_THRESHOLD);\n        }\n    });\n};\n\n/* Get install command\n *\n * Depends on package manager, dev and exact\n */\n\nlet getInstallCommand = (name, dev) => {\n    let packageManager = 'npm';\n    if (argv.yarn) packageManager = 'yarn';\n\n    let command;\n\n    if (packageManager === 'npm') {\n        command = `npm install ${name} --save`;\n        if (dev) command += '-dev';\n        if (argv.exact) command += ' --save-exact';\n    } else if (packageManager === 'yarn') {\n        command = `yarn add ${name}`;\n        if (dev) command += ' --dev';\n        // yarn always adds exact\n    }\n    return command;\n};\n\n/* Install module\n * Install given module\n */\n\nlet installModule = ({name, dev}) => {\n    let spinner = startSpinner(`Installing ${name}`, 'green');\n\n    let command = getInstallCommand(name, dev);\n\n    let message = `${name} installed`;\n    if (dev) message += ' in devDependencies';\n\n    let success = runCommand(command);\n    if (success) stopSpinner(spinner, message, 'green');\n    else stopSpinner(spinner, `${name} installation failed`, 'yellow');\n};\n\n/* is scoped module? */\n\nlet isScopedModule = (name) => name[0] === '@';\n\n/* Install module if author is trusted */\n\nlet installModuleIfTrustedAuthor = ({name, dev}) => {\n    let trustedAuthor = argv['trust-author'];\n    packageJson(name).then(json => {\n        if (json.author && json.author.name === trustedAuthor) installModule({name, dev});\n        else console.log(colors.red(`${name} not trusted`));\n    });\n};\n\n/* Install module if trusted\n * Call isModulePopular before installing\n */\n\nlet installModuleIfTrusted = ({name, dev}) => {\n    // Trust scoped modules\n    if (isScopedModule(name)) installModule({name, dev});\n    else {\n        isModulePopular(name, (popular) => {\n            // Popular as proxy for trusted\n            if (popular) installModule({name, dev});\n            // Trusted Author\n            else if (argv['trust-author']) installModuleIfTrustedAuthor({name, dev});\n            // Not trusted\n            else console.log(colors.red(`${name} not trusted`));\n        });\n    }\n};\n\n/* Get uninstall command\n *\n * Depends on package manager\n */\n\nlet getUninstallCommand = (name) => {\n    let packageManager = 'npm';\n    if (argv.yarn) packageManager = 'yarn';\n\n    let command;\n\n    if (packageManager === 'npm') command = `npm uninstall ${name} --save`;\n    else if (packageManager === 'yarn') command = `yarn remove ${name}`;\n\n    return command;\n};\n\n/* Uninstall module */\n\nlet uninstallModule = ({name, dev}) => {\n    if (dev) return;\n\n    let command = getUninstallCommand(name);\n    let message = `${name} removed`;\n\n    let spinner = startSpinner(`Uninstalling ${name}`, 'red');\n    runCommand(command);\n    stopSpinner(spinner, message, 'red');\n};\n\n/* Remove built in/native modules */\n\nlet removeBuiltInModules = (modules) => modules.filter((module) => !isBuiltInModule(module.name));\n\n/* Remove local files that are required */\n\nlet removeLocalFiles = (modules) => modules.filter((module) => !module.name.includes('./'));\n\n/* Remove file paths from module names\n * Example: convert `colors/safe` to `colors`\n */\n\nlet removeFilePaths = (modules) => {\n    for (let module of modules) {\n        let slicedName = module.name.split('/')[0];\n        if (slicedName.substr(0, 1) !== '@') module.name = slicedName;\n    }\n    return modules;\n};\n\n/* Filter registry modules */\n\nlet filterRegistryModules = (modules) => removeBuiltInModules(\n    removeFilePaths(\n    removeLocalFiles(\n        modules\n    )));\n\n/* Get module names from array of module objects */\n\nlet getNamesFromModules = (modules) => modules.map(module => module.name);\n\n/* Modules diff */\n\nlet diff = (first, second) => {\n    let namesFromSecond = getNamesFromModules(second);\n    return first.filter(module => !namesFromSecond.includes(module.name));\n};\n\n/* Reinstall modules */\n\nlet cleanup = () => {\n    let spinner = startSpinner('Cleaning up', 'green');\n    if (argv.yarn) runCommand('yarn');\n    else runCommand('npm install');\n    stopSpinner(spinner);\n};\n\n/* Does package.json exist?\n * Without package.json, most of the functionality fails\n *     installing + adding to package.json\n *     removing unused modules\n */\n\nlet packageJSONExists = () => fs.existsSync('package.json');\n\n/* Public helper functions */\n\nmodule.exports = {\n    getInstalledModules,\n    getUsedModules,\n    filterRegistryModules,\n    installModule,\n    installModuleIfTrusted,\n    uninstallModule,\n    diff,\n    cleanup,\n    packageJSONExists\n};\n\n","/home/travis/build/npmtest/node-npmtest-auto-install/auto-install/src/includes-polyfill.js":"Array.prototype.includes = function includes(searchElement) {\n    if (this == null) {\n        throw new TypeError('Array.prototype.includes called on null or undefined');\n    }\n\n    let O = Object(this);\n    let len = parseInt(O.length, 10) || 0;\n    if (len === 0) {\n        return false;\n    }\n    let n = parseInt(arguments[1], 10) || 0;\n    let k;\n    if (n >= 0) {\n        k = n;\n    } else {\n        k = len + n;\n        if (k < 0) { k = 0; }\n    }\n    let currentElement;\n    while (k < len) {\n        currentElement = O[k];\n        if (searchElement === currentElement ||\n     (searchElement !== searchElement && currentElement !== currentElement)) { // NaN !== NaN\n            return true;\n        }\n        k++;\n    }\n    return false;\n};\n"}